// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/incu6us/weather-cli/service (interfaces: WeatherClient)
//
// Generated by this command:
//
//	mockgen -destination=./mock/weather_client.go -package=mock github.com/incu6us/weather-cli/service WeatherClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	client "github.com/incu6us/weather-cli/client"
	gomock "go.uber.org/mock/gomock"
)

// MockWeatherClient is a mock of WeatherClient interface.
type MockWeatherClient struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherClientMockRecorder
	isgomock struct{}
}

// MockWeatherClientMockRecorder is the mock recorder for MockWeatherClient.
type MockWeatherClientMockRecorder struct {
	mock *MockWeatherClient
}

// NewMockWeatherClient creates a new mock instance.
func NewMockWeatherClient(ctrl *gomock.Controller) *MockWeatherClient {
	mock := &MockWeatherClient{ctrl: ctrl}
	mock.recorder = &MockWeatherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherClient) EXPECT() *MockWeatherClientMockRecorder {
	return m.recorder
}

// CurrentWeather mocks base method.
func (m *MockWeatherClient) CurrentWeather(ctx context.Context, lat, lon float64) (client.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentWeather", ctx, lat, lon)
	ret0, _ := ret[0].(client.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentWeather indicates an expected call of CurrentWeather.
func (mr *MockWeatherClientMockRecorder) CurrentWeather(ctx, lat, lon any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentWeather", reflect.TypeOf((*MockWeatherClient)(nil).CurrentWeather), ctx, lat, lon)
}
