// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/incu6us/weather-cli/service (interfaces: GeoDecoder)
//
// Generated by this command:
//
//	mockgen -destination=./mock/geodecoder.go -package=mock github.com/incu6us/weather-cli/service GeoDecoder
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGeoDecoder is a mock of GeoDecoder interface.
type MockGeoDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockGeoDecoderMockRecorder
	isgomock struct{}
}

// MockGeoDecoderMockRecorder is the mock recorder for MockGeoDecoder.
type MockGeoDecoderMockRecorder struct {
	mock *MockGeoDecoder
}

// NewMockGeoDecoder creates a new mock instance.
func NewMockGeoDecoder(ctrl *gomock.Controller) *MockGeoDecoder {
	mock := &MockGeoDecoder{ctrl: ctrl}
	mock.recorder = &MockGeoDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoDecoder) EXPECT() *MockGeoDecoderMockRecorder {
	return m.recorder
}

// ToLatLon mocks base method.
func (m *MockGeoDecoder) ToLatLon(country, city string) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToLatLon", country, city)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ToLatLon indicates an expected call of ToLatLon.
func (mr *MockGeoDecoderMockRecorder) ToLatLon(country, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToLatLon", reflect.TypeOf((*MockGeoDecoder)(nil).ToLatLon), country, city)
}
